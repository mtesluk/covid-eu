{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","state","coronaData","country","axios","get","tooltip","d3","append","attr","style","projection","center","translate","w","h","scale","path","svg","then","json","selectAll","data","features","enter","on","d","properties","name","countryData","text","cases","getCoronaData","setState","pageX","pageY","color","backgroundColor","className","this","getBackgroundcolor","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uVA6HeA,E,kDApHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAY,IAHG,E,0DAOLC,GACZ,OAAOC,IAAMC,IAAI,sDAAwDF,K,0CAGtD,IAAD,OAgBZG,EAAUC,IAAU,QAAQC,OAAO,OACtCC,KAAK,QAAS,WACdC,MAAM,UAAW,QACjBA,MAAM,aAAc,SACpBA,MAAM,QAAS,SACfA,MAAM,WAAY,YAClBA,MAAM,UAAW,SACjBA,MAAM,UAAW,UAIhBC,EAAaJ,MACLK,OAAO,CAAE,GAAI,KACbC,UAAU,CAAEC,IAAKC,MACjBC,MAAM,CALV,IAKc,MAElBC,EAAOV,MACFI,WAAWA,GAGhBO,EAAMX,IAAU,QACbC,OAAO,OACPC,KAAK,QAbJ,KAcDA,KAAK,SAbJ,KAeRF,IAAQ,cAAcY,MAAK,SAAAC,GACzBF,EAAIG,UAAU,QACXC,KAAKF,EAAKG,UACVC,QACAhB,OAAO,QACPC,KAAK,IAAKQ,GACVR,KAAK,OAAQ,wBACbA,KAAK,SAAU,yBACfgB,GAAG,aAAa,SAAAC,GACf,IAAMvB,EAAWuB,EAAEC,WAAWC,KAC9B,GAAK,EAAK3B,MAAMC,WAAWC,GAcpB,CACL,IAAI0B,EAAc,EAAK5B,MAAMC,WAAWC,GACxCG,EAAQwB,KAAK,YAAc3B,EAAU,WAAa0B,EAAYE,YAf9D,EAAKC,cAAc7B,GAASgB,MAAK,YAAa,IAAXG,EAAU,EAAVA,KACjC,GAAa,sBAATA,EAA8B,CAChC,IAAIpB,EAAU,eACT,EAAKD,MAAMC,WADF,eAEXC,EAAUmB,IAEb,EAAKW,SAAL,eACK,EAAKhC,MADV,CAEEC,WAAYA,KAEdI,EAAQwB,KAAK,YAAc3B,EAAU,WAAamB,EAAKS,WAQ7DzB,EACGI,MAAM,UAAW,SACjBA,MAAM,OAASH,IAAS2B,MAAQ,GAAM,MACtCxB,MAAM,MAAQH,IAAS4B,MAAQ,GAAM,MACrCzB,MAAM,SAAU,WAEpBe,GAAG,YAAY,SAAAC,GACdpB,EACCI,MAAM,UAAW,gB,yCAOP0B,GACjB,MAAO,CAACC,gBAAiBD,K,+BAIzB,OACE,yBAAKE,UAAU,OACb,qFACA,mDACA,2EACA,yBAAKA,UAAU,sBAAsB5B,MAAO6B,KAAKC,mBAAmB,YAApE,kBACA,yBAAKF,UAAU,sBAAsB5B,MAAO6B,KAAKC,mBAAmB,YAApE,sBACA,yBAAKF,UAAU,sBAAsB5B,MAAO6B,KAAKC,mBAAmB,YAApE,uBACA,yBAAKF,UAAU,sBAAsB5B,MAAO6B,KAAKC,mBAAmB,YAApE,wBACA,yBAAKF,UAAU,sBAAsB5B,MAAO6B,KAAKC,mBAAmB,YAApE,8B,GA/GUC,IAAMC,WCOTC,EARH,WACV,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCEcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3f2d52f6.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Map.scss';\n\nimport axios from 'axios';\nimport * as d3 from 'd3';\n\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      coronaData: {}\n    }\n  }\n\n  getCoronaData(country) {\n    return axios.get(\"https://coronavirus-19-api.herokuapp.com/countries/\" + country);\n  }\n\n  componentDidMount() {\n    const _manageColors = (amount) => {\n      const ranges = [\n        {min: 0, max: 1000, color: '#fff1d9'},\n        {min: 1001, max: 10000, color: '#fdcd8b'},\n        {min: 10001, max: 50000, color: '#b55440'},\n        {min: 50001, max: 100000, color: '#b53828'},\n        {min: 100001, max: 220001, color: '#500000'},\n      ]\n\n      for(var range of ranges) {\n        if (amount > range.min && amount < range.max) return range.color;\n      }\n      return 'black';\n    }\n\n    const tooltip = d3.select('.map').append('div')\n      .attr('class', 'tooltip')\n      .style('display', 'none')\n      .style('background', 'black')\n      .style('color', 'white')\n      .style('position', 'absolute')\n      .style('z-index', '10000')\n      .style('padding', '0 10px');\n\n    var w = 800;\n    var h = 600;\n    var projection = d3.geoMercator()\n               .center([ 13, 52 ])\n               .translate([ w/2, h/2 ])\n               .scale([ w/1.5 ]);\n\n    var path = d3.geoPath()\n            .projection(projection);\n\n\n    var svg = d3.select(\".map\")\n          .append(\"svg\")\n          .attr(\"width\", w)\n          .attr(\"height\", h);\n\n    d3.json(\"eu.geojson\").then(json => {\n      svg.selectAll(\"path\")\n        .data(json.features)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", path)\n        .attr(\"fill\", \"rgba(8, 81, 50, 0.5)\")\n        .attr(\"stroke\", \"rgba(8, 81, 156, 0.2)\")\n        .on('mouseover', d => {\n          const country  = d.properties.name;\n          if (!this.state.coronaData[country]) {\n            this.getCoronaData(country).then(({data}) => {\n              if (data !== 'Country not found') {\n                var coronaData = {\n                  ...this.state.coronaData,\n                  [country]: data\n                }\n                this.setState({\n                  ...this.state,\n                  coronaData: coronaData\n                })\n                tooltip.text('Country: ' + country + ' Cases: ' + data.cases)\n              }\n            });\n          } else {\n            var countryData = this.state.coronaData[country];\n            tooltip.text('Country: ' + country + ' Cases: ' + countryData.cases)\n          }\n\n          tooltip\n            .style('display', 'block')\n            .style('left', (d3.event.pageX - 40) + 'px')\n            .style('top', (d3.event.pageY - 40) + 'px')\n            .style('cursor', 'none');\n        })\n        .on('mouseout', d => {\n          tooltip\n          .style('display', 'none');\n        })\n\n\n    });\n  }\n\n  getBackgroundcolor(color) {\n    return {backgroundColor: color}\n  }\n\n  render() {\n    return (\n      <div className=\"map\">\n        <h1>Zakażenia i zgony spowodowane COVID-19 w Europie</h1>\n        <h1>Zródło: WHO</h1>\n        <h3>Legenda (ilość zakażeń)</h3>\n        <div className=\"map__legend-element\" style={this.getBackgroundcolor('#fff1d9')}>0-1000 osób</div>\n        <div className=\"map__legend-element\" style={this.getBackgroundcolor('#fdcd8b')}>1001-10000 osób</div>\n        <div className=\"map__legend-element\" style={this.getBackgroundcolor('#b55440')}>10001-50000 osób</div>\n        <div className=\"map__legend-element\" style={this.getBackgroundcolor('#b53828')}>50001-100000 osób</div>\n        <div className=\"map__legend-element\" style={this.getBackgroundcolor('#500000')}>100001-220001 osób</div>\n      </div>\n    )\n  }\n}\n\nexport default Map;","import React from 'react';\n\nimport './App.scss';\n\nimport Map from './Map'\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Map></Map>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}