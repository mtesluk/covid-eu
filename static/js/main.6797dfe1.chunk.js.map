{"version":3,"sources":["config.js","../../src/charts/utils.js","../../src/charts/BarChart.js","../../src/charts/PieChart.js","Map.js","Info.js","ChartsMain.js","ChartsExtra.js","Legend.js","App.js","serviceWorker.js","index.js"],"names":["ranges","min","max","color","manageColors","amount","range","BarChart","componentDidMount","width","this","props","height","data","componentDidUpdate","prevProps","_prepareChart","margin","y","d","x","d3","svg","countryName","cases","deaths","recovered","critical","casesPerOneMillion","deathsPerOneMillion","testsPerOneMillion","g","i","render","className","classSvgName","React","Component","PieChart","console","Math","t","arc","radius","arcLabel","centroid","arcs","pie","text","Map","ref","createRef","state","loading","coronaData","endpoints","countries","map","getComputedStyle","alert","computedStyle","current","clientWidth","parseFloat","paddingLeft","paddingRight","projection","translate","scale","path","attr","promiseMap","headers","Accept","promiseData","axios","get","Promise","all","then","dataArray","mapData","countriesData","_filterCountries","features","feature","properties","setAllData","_reduceCountries","selectAll","enter","append","name","on","setPickedData","setState","sovereignts","property","sovereignt","filter","country","includes","reduce","sum","val","LinearProgress","Info","cl","setTimeout","nextProps","nextState","ChartsMain","mostNumCasesChart","lessNumCasesChart","prevState","_getWidth","dataMost","el","dataLess","colorRanges","ChartsExtra","mostNumDeathsChart","dataMostDeaths","testsPerMillion","getBackgroundcolor","backgroundColor","Legend","style","App","useState","countryInfo","setCountryInfo","setCountriesData","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6797dfe1.chunk.js","sourcesContent":["export const ranges = [\n  {min: 0, max: 1000, color: '#fff1d9'},\n  {min: 1001, max: 10000, color: '#fdcd8b'},\n  {min: 10001, max: 50000, color: '#b55440'},\n  {min: 50001, max: 100000, color: '#b53828'},\n  {min: 100001, max: 420001, color: '#500000'},\n];","export const manageColors = (amount, ranges) => {\n  if (!amount) return '#ff0909';\n\n  for(var range of ranges) {\n    if (amount > range.min && amount < range.max) return range.color;\n  }\n  return '#000';\n};\n","import React from 'react';\n\nimport './BarChart.scss';\n\nimport * as d3 from 'd3';\nimport { manageColors } from './utils';\n\n\nclass BarChart extends React.Component {\n\n  componentDidMount() {\n    const width = this.props.width;\n    const height = 4/5 * width;\n    const data = this.props.data;\n    this._prepareChart(height, width, data, this.props.ranges);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.data !== prevProps.data) {\n      const width = this.props.width;\n      const height = 4/5 * width;\n      const data = this.props.data;\n      this._prepareChart(height, width, data, this.props.ranges);\n    }\n  }\n\n  _prepareChart(height, width, data, ranges) {\n    const margin = ({top: 30, right: 0, bottom: 30, left: 40});\n    const y = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.cases)]).nice()\n      .range([height - margin.bottom, margin.top])\n\n    const x = d3.scaleBand()\n      .domain(d3.range(data.length))\n      .range([margin.left, width - margin.right])\n      .padding(0.1);\n\n    const xAxis = g => g\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n      .call(d3.axisBottom(x).tickFormat(i => data[i].country).tickSizeOuter(0));\n\n    const yAxis = g => g\n      .attr(\"transform\", `translate(${margin.left},0)`)\n      .call(d3.axisLeft(y).ticks(null, 's'))\n      .call(g => g.select(\".domain\").remove());\n\n    const svg = d3.select(`.${this.props.classSvgName}`)\n      .attr(\"viewBox\", [0, 0, width, height]);\n\n    svg.append('g')\n      .selectAll('rect')\n      .data(data)\n      .join('rect')\n      .attr('fill', d => manageColors(d.cases, ranges))\n      .attr('x', (d, i) => x(i))\n      .attr('y', d => y(d.cases))\n      .attr('height', d => y(0) - y(d.cases))\n      .attr('width', x.bandwidth())\n      .on('mouseover', d => {\n        const countryName  = d.country;\n        this.props.setPickedData({\n          countryName,\n          cases: d.cases,\n          deaths: d.deaths,\n          recovered: d.recovered,\n          critical: d.critical,\n          casesPerOneMillion: d.casesPerOneMillion,\n          deathsPerOneMillion: d.deathsPerOneMillion,\n          testsPerOneMillion: d.testsPerOneMillion,\n        });\n      });\n\n    svg.append(\"g\")\n      .call(xAxis);\n\n    svg.append(\"g\")\n      .call(yAxis);\n  }\n\n  render() {\n    return (\n      <svg className={this.props.classSvgName}></svg>\n    )\n  }\n}\n\nexport default BarChart;","import React from 'react';\n\nimport './PieChart.scss';\n\nimport * as d3 from 'd3';\n\n\nclass PieChart extends React.Component {\n  componentDidMount() {\n    const width = this.props.width;\n    const height = 4/5 * width;\n    const data = this.props.data;\n    this._prepareChart(height, width, data);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(this.props.data)\n    if (this.props.data !== prevProps.data) {\n      const data = this.props.data;\n      const width = this.props.width;\n      const height = Math.min(width, 500)\n      this._prepareChart(height, width, data);\n    }\n  }\n\n  _prepareChart(height, width, data) {\n    const color = d3.scaleOrdinal()\n      .domain(data.map(d => d.country))\n      .range(d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), data.length).reverse())\n\n    const arc = d3.arc()\n      .innerRadius(0)\n      .outerRadius(Math.min(width, height) / 2 - 1)\n\n    const radius = Math.min(width, height) / 2 * 0.8;\n    const arcLabel = {\n      centroid: d3.arc().innerRadius(radius).outerRadius(radius)\n      }\n\n    const pie = d3.pie()\n      .sort(null)\n      .value(d => d.cases)\n\n    const arcs = pie(data);\n\n    const svg = d3.select(`.${this.props.classSvgName}`)\n        .attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\n\n    svg.append(\"g\")\n      .attr(\"stroke\", \"white\")\n      .selectAll(\"path\")\n      .data(arcs)\n      .join(\"path\")\n      .attr(\"fill\", d => color(d.data.country))\n      .attr(\"d\", arc)\n      .append(\"title\")\n      .text(d => `${d.data.country}: ${d.data.cases.toLocaleString()}`);\n\n    svg.append(\"g\")\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 12)\n      .attr(\"text-anchor\", \"middle\")\n    .selectAll(\"text\")\n    .data(arcs)\n    .join(\"text\")\n      .attr(\"transform\", d => `translate(${arcLabel.centroid(d)})`)\n      .call(text => text.append(\"tspan\")\n          .attr(\"y\", \"-0.4em\")\n          .attr(\"font-weight\", \"bold\")\n          .text(d => d.data.country))\n      .call(text => text.filter(d => (d.endAngle - d.startAngle) > 0.25).append(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"y\", \"0.7em\")\n          .attr(\"fill-opacity\", 0.7)\n          .text(d => d.data.cases.toLocaleString()));\n  }\n\n  render() {\n    return (\n      <svg className={this.props.classSvgName}></svg>\n    )\n  }\n}\n\nexport default PieChart;","import React from 'react';\n\nimport './Map.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport axios from 'axios';\nimport * as d3 from 'd3';\nimport { ranges } from './config';\nimport { manageColors } from 'charts';\n\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      loading: true,\n      coronaData: {},\n      width: 0,\n      endpoints: {\n        countries: \"https://coronavirus-19-api.herokuapp.com/countries\",\n        map: \"./eu.json\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (!getComputedStyle) { alert('Not supported'); }\n    const computedStyle = getComputedStyle(this.ref.current);\n    var width = this.ref.current.clientWidth;\n    width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n\n    const height = 4/5 * width;\n    const projection = d3.geoMercator()\n               .translate([ width/4, height*1.6 ])\n               .scale([ width/1.1 ]);\n\n    const path = d3.geoPath()\n            .projection(projection);\n\n    const svg = d3.select('.map__svg')\n          .attr('width', width)\n          .attr('height', height);\n\n    const promiseMap = d3.json(this.state.endpoints.map, {\n      headers: { Accept: \"application/json; odata=verbose\"}\n    });\n    const promiseData = axios.get(this.state.endpoints.countries);\n    Promise.all([promiseMap, promiseData]).then(dataArray => {\n      const mapData = dataArray[0];\n      let countriesData = this._filterCountries(dataArray[1].data, mapData.features.map(feature => feature.properties));\n      this.props.setAllData(countriesData);\n      countriesData = this._reduceCountries(countriesData);\n\n      svg.selectAll('path')\n        .data(mapData.features)\n        .enter()\n        .append('path')\n        .attr('d', path)\n        .attr('fill', d => {\n          const countryName  = d.properties.name;\n          var color = manageColors(countriesData[countryName]?.cases, ranges)\n          return color\n        })\n        .attr('stroke', d => 'red')\n        .on('mouseover', d => {\n          const countryName  = d.properties.name;\n          this.props.setPickedData({\n            countryName,\n            cases: countriesData[countryName]?.cases,\n            deaths: countriesData[countryName]?.deaths,\n            recovered: countriesData[countryName]?.recovered,\n            critical: countriesData[countryName]?.critical,\n            casesPerOneMillion: countriesData[countryName]?.casesPerOneMillion,\n            deathsPerOneMillion: countriesData[countryName]?.deathsPerOneMillion,\n            testsPerOneMillion: countriesData[countryName]?.testsPerOneMillion,\n          });\n        });\n\n        this.setState({\n          ...this.state,\n          loading: false\n        });\n\n        this.setState({\n          ...this.state,\n          coronaData: countriesData\n        });\n    });\n  }\n\n  _filterCountries(countries, properties) {\n    const sovereignts = properties.map(property => property.sovereignt);\n    countries = countries.filter(country => sovereignts.includes(country.country));\n    return countries;\n  }\n\n  _reduceCountries(countries) {\n    return countries.reduce((sum, val) => ({...sum, [val.country]: val}), {});\n  }\n\n  render() {\n    return (\n      <div className=\"map\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"map__progress\" color=\"secondary\" />}\n        <svg className=\"map__svg\"></svg>\n      </div>\n    )\n  }\n}\n\nexport default Map;","import React from 'react';\n\nimport './Info.scss';\n\n\nclass Info extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      cl: '',\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.countryName !== prevProps.countryName) {\n      setTimeout(() => {\n        this.setState({\n          ...this.state,\n          cl: ''\n        })\n      }, 1000)\n    }\n  }\n\n  getSnapshotBeforeUpdate(nextProps, nextState) {\n    if (this.props.countryName !== nextProps.countryName) {\n      this.setState({\n        ...this.state,\n        cl: 'info__anim'\n      })\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div className={\"info \" + this.state.cl}>\n        <p className=\"info__element\">Name: {this.props.countryName || 'none'}</p>\n        <p className=\"info__element\">Cases: {this.props.cases || '0'}</p>\n        <p className=\"info__element\">Deaths: {this.props.deaths || '0'}</p>\n        <p className=\"info__element\">Recovered: {this.props.recovered || '0'}</p>\n        <p className=\"info__element\">Critical: {this.props.critical || '0'}</p>\n        <p className=\"info__element\">Cases Per Million: {this.props.casesPerOneMillion || '0'}</p>\n        <p className=\"info__element\">Deaths Per Million: {this.props.deathsPerOneMillion || '0'}</p>\n        <p className=\"info__element\">Tests Per Million: {this.props.testsPerOneMillion || '0'}</p>\n      </div>\n    )\n  }\n}\n\nexport default Info;","import React from 'react';\n\nimport './ChartsMain.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport { BarChart } from 'charts';\nimport { PieChart } from 'charts';\nimport { ranges as colorRanges } from './config';\n\n\nclass ChartsMain extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      loading: true,\n      mostNumCasesChart: {\n        width: 0,\n        data: []\n      },\n      lessNumCasesChart: {\n        width: 0,\n        data: []\n      },\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.data !== prevProps.data) {\n      const width = this._getWidth();\n      const dataMost = this.props.data.filter(el => (el.cases > 100000 || el.country === 'Poland'));\n      const dataLess = this.props.data.filter(el => (el.cases < 3000 || el.country === 'Poland'));\n\n      this.setState({\n        ...this.state,\n        loading: false,\n        mostNumCasesChart: {\n          width,\n          data: dataMost\n        },\n        lessNumCasesChart: {\n          width,\n          data: dataLess\n        },\n      });\n    }\n  }\n\n  _getWidth() {\n    if (!getComputedStyle) { alert('Not supported'); }\n    const computedStyle = getComputedStyle(this.ref.current);\n    var width = this.ref.current.clientWidth;\n    width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n    return width;\n  }\n\n  render() {\n    return (\n      <div className=\"charts-main\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"charts-main__progress\" color=\"secondary\" />}\n        <header className=\"charts-main__header\">Most numerous countries</header>\n        <BarChart\n          classSvgName=\"charts-main__svg-bar\"\n          setPickedData={this.props.setPickedData}\n          width={this.state.mostNumCasesChart.width}\n          data={this.state.mostNumCasesChart.data}\n          ranges={colorRanges}\n        ></BarChart>\n        <header className=\"charts-main__header\">Less numerous countries</header>\n        <PieChart\n          classSvgName=\"charts-main__svg-pie\"\n          setPickedData={this.props.setPickedData}\n          width={this.state.lessNumCasesChart.width}\n          data={this.state.lessNumCasesChart.data}\n        ></PieChart>\n        <p className=\"charts-main__footer\">Source: https://coronavirus-19-api.herokuapp.com/countries</p>\n      </div>\n    )\n  }\n}\n\nexport default ChartsMain;","import React from 'react';\n\nimport './ChartsExtra.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport { BarChart } from 'charts';\nimport { ranges as colorRanges } from './config';\n\n\nclass ChartsExtra extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      loading: true,\n      mostNumDeathsChart: {\n        width: 0,\n        data: []\n      },\n      lessNumCasesChart: {\n        width: 0,\n        data: []\n      },\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.data !== prevProps.data) {\n      const width = this._getWidth();\n      const dataMostDeaths = this.props.data.filter(el => (el.deaths > 20000 || el.country === 'Poland'));\n      const dataLess = this.props.data.filter(el => (el.testsPerMillion > 9000 || el.country === 'Poland'));\n\n      this.setState({\n        ...this.state,\n        loading: false,\n        mostNumDeathsChart: {\n          width,\n          data: dataMostDeaths\n        },\n        lessNumCasesChart: {\n          width,\n          data: dataLess\n        },\n      });\n    }\n  }\n\n  _getWidth() {\n    if (!getComputedStyle) { alert('Not supported'); }\n    const computedStyle = getComputedStyle(this.ref.current);\n    var width = this.ref.current.clientWidth;\n    width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n    return width;\n  }\n\n  render() {\n    return (\n      <div className=\"charts-extra\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"charts-extra__progress\" color=\"secondary\" />}\n        <header className=\"charts-extra__header\">Most deaths</header>\n        <BarChart\n          classSvgName=\"charts-extra__svg-bar\"\n          setPickedData={this.props.setPickedData}\n          width={this.state.mostNumDeathsChart.width}\n          data={this.state.mostNumDeathsChart.data}\n          ranges={colorRanges}\n        ></BarChart>\n      </div>\n    )\n  }\n}\n\nexport default ChartsExtra;","import React from 'react';\n\nimport './Legend.scss';\n\nconst getBackgroundcolor = (color) => {\n  return {backgroundColor: color};\n}\n\nconst Legend = (props) => {\n  return (\n    <div className=\"legend\">\n      <h3>Legend</h3>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#fff1d9\")}>0-1000</div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#fdcd8b\")}>1001-10000</div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#b55440\")}>10001-50000</div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#b53828\")}>50001-100000</div>\n      <div className=\"legend__element\" style={{...getBackgroundcolor(\"#500000\"), color: \"white\"}}>100001-320001</div>\n    </div>\n  )\n}\n\nexport default Legend;","import React, { useState } from 'react';\n\nimport './App.scss';\n\nimport Map from './Map';\nimport Info from './Info';\nimport ChartsMain from './ChartsMain';\nimport ChartsExtra from './ChartsExtra';\nimport Legend from './Legend';\n\nconst App = () => {\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countriesData, setCountriesData] = useState([]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__info\">\n        <Info {...countryInfo}></Info>\n      </div>\n      <div className=\"app__charts-main\">\n        <ChartsMain setPickedData={setCountryInfo} data={countriesData}></ChartsMain>\n      </div>\n      <div className=\"app__content\">\n        <Map setPickedData={setCountryInfo} setAllData={setCountriesData}></Map>\n      </div>\n      <div className=\"app__legend\">\n        <Legend></Legend>\n      </div>\n      <div className=\"app__charts-extra\">\n        <ChartsExtra setPickedData={setCountryInfo} data={countriesData}></ChartsExtra>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}