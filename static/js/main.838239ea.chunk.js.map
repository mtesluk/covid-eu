{"version":3,"sources":["Map.js","Info.js","Charts.js","Legend.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","ref","React","createRef","state","loading","coronaData","width","endpoints","countries","map","getComputedStyle","alert","computedStyle","this","current","clientWidth","height","parseFloat","paddingLeft","paddingRight","projection","d3","translate","scale","path","svg","attr","promiseMap","headers","Accept","promiseData","axios","get","Promise","all","then","dataArray","mapData","countriesData","_filterCountries","data","features","feature","properties","setAllData","_reduceCountries","selectAll","enter","append","d","countryName","name","_manageColors","cases","on","setPickedData","setState","amount","min","max","color","range","sovereignts","property","sovereignt","filter","country","includes","reduce","sum","val","className","LinearProgress","Component","Info","cl","prevProps","setTimeout","nextProps","nextState","Charts","prevState","el","console","log","Math","floor","margin","top","right","bottom","left","y","domain","nice","x","length","padding","join","i","bandwidth","call","g","tickFormat","tickSizeOuter","ticks","select","remove","text","getBackgroundcolor","backgroundColor","Legend","style","App","useState","countryInfo","setCountryInfo","setCountriesData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.838239ea.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Map.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport axios from 'axios';\nimport * as d3 from 'd3';\n\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      loading: true,\n      coronaData: {},\n      width: 0,\n      endpoints: {\n        countries: \"https://coronavirus-19-api.herokuapp.com/countries\",\n        map: \"./eu.json\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (!getComputedStyle) { alert('Not supported'); }\n    const computedStyle = getComputedStyle(this.ref.current);\n    var width = this.ref.current.clientWidth;\n    width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n\n    const height = 4/5 * width;\n    const projection = d3.geoMercator()\n               .translate([ width/4, height*1.6 ])\n               .scale([ width/1.1 ]);\n\n    const path = d3.geoPath()\n            .projection(projection);\n\n\n    const svg = d3.select('.map__svg')\n          .attr('width', width)\n          .attr('height', height);\n\n    const promiseMap = d3.json(this.state.endpoints.map, {\n      headers: { Accept: \"application/json; odata=verbose\"}\n    });\n    const promiseData = axios.get(this.state.endpoints.countries);\n    Promise.all([promiseMap, promiseData]).then(dataArray => {\n      const mapData = dataArray[0];\n      let countriesData = this._filterCountries(dataArray[1].data, mapData.features.map(feature => feature.properties));\n      this.props.setAllData(countriesData);\n      countriesData = this._reduceCountries(countriesData);\n\n      svg.selectAll('path')\n        .data(mapData.features)\n        .enter()\n        .append('path')\n        .attr('d', path)\n        .attr('fill', d => {\n          const countryName  = d.properties.name;\n          var color = this._manageColors(countriesData[countryName]?.cases)\n          return color\n        })\n        .attr('stroke', d => 'red')\n        .on('touchstart', d => {\n          // const countryName  = d.properties.name;\n        })\n        .on('mouseover', d => {\n          const countryName  = d.properties.name;\n          this.props.setPickedData({\n            countryName,\n            cases: countriesData[countryName]?.cases\n          });\n        });\n\n        this.setState({\n          ...this.state,\n          loading: false\n        });\n\n        this.setState({\n          ...this.state,\n          coronaData: countriesData\n        });\n    });\n  }\n\n  _manageColors(amount) {\n    if (!amount) return '#ff0909';\n    const ranges = [\n      {min: 0, max: 1000, color: '#fff1d9'},\n      {min: 1001, max: 10000, color: '#fdcd8b'},\n      {min: 10001, max: 50000, color: '#b55440'},\n      {min: 50001, max: 100000, color: '#b53828'},\n      {min: 100001, max: 420001, color: '#500000'},\n    ]\n\n    for(var range of ranges) {\n      if (amount > range.min && amount < range.max) return range.color;\n    }\n    return '#000';\n  }\n\n  _filterCountries(countries, properties) {\n    const sovereignts = properties.map(property => property.sovereignt);\n    countries = countries.filter(country => sovereignts.includes(country.country));\n    return countries;\n  }\n\n  _reduceCountries(countries) {\n    return countries.reduce((sum, val) => ({...sum, [val.country]: val}), {});\n  }\n\n  render() {\n    return (\n      <div className=\"map\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"map__progress\" color=\"secondary\" />}\n        <svg className=\"map__svg\"></svg>\n      </div>\n    )\n  }\n}\n\nexport default Map;","import React from 'react';\n\nimport './Info.scss';\n\n\nclass Info extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      cl: '',\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.countryName !== prevProps.countryName) {\n      setTimeout(() => {\n        this.setState({\n          ...this.state,\n          cl: ''\n        })\n      }, 1000)\n    }\n  }\n\n  getSnapshotBeforeUpdate(nextProps, nextState) {\n    if (this.props.countryName !== nextProps.countryName) {\n      // clearTimeout(this.state.tm);\n      // this.setState({\n      //   ...this.state,\n      //   cl: ''\n      // })\n      this.setState({\n        ...this.state,\n        cl: 'info__anim'\n      })\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div className={\"info \" + this.state.cl}>\n        <p className=\"info__name\">Name: {this.props.countryName || 'none'}</p>\n        <p>Cases: {this.props.cases || '0'}</p>\n        <p className=\"info__footer\">Source: https://coronavirus-19-api.herokuapp.com/countries</p>\n      </div>\n    )\n  }\n}\n\nexport default Info;","import React from 'react';\n\nimport './Charts.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport axios from 'axios';\nimport * as d3 from 'd3';\n\n\nclass Charts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      loading: true,\n      width: 0,\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.data !== prevProps.data) {\n      const data = this.props.data.filter(el => (el.cases > 100000 || el.country === 'Poland'));\n      console.log(data)\n\n      if (!getComputedStyle) { alert('Not supported'); }\n      const computedStyle = getComputedStyle(this.ref.current);\n      var width = this.ref.current.clientWidth;\n      width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n      const height = Math.floor(4/5 * width);\n\n      const margin = ({top: 30, right: 0, bottom: 30, left: 40});\n      const y = d3.scaleLinear()\n        .domain([0, d3.max(data, d => d.cases)]).nice()\n        .range([height - margin.bottom, margin.top])\n\n      const x = d3.scaleBand()\n        .domain(d3.range(data.length))\n        .range([margin.left, width - margin.right])\n        .padding(0.1);\n\n      const xAxis = g => g\n        .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n        .call(d3.axisBottom(x).tickFormat(i => data[i].name).tickSizeOuter(0));\n\n      const yAxis = g => g\n        .attr(\"transform\", `translate(${margin.left},0)`)\n        .call(d3.axisLeft(y).ticks(null, 's'))\n        .call(g => g.select(\".domain\").remove())\n        .call(g => g.append(\"text\")\n              .attr(\"x\", -margin.left)\n              .attr(\"y\", 10)\n              .attr(\"fill\", \"currentColor\")\n              .attr(\"text-anchor\", \"start\")\n              .text(data.y))\n\n      const svg = d3.select('.charts__svg')\n        .attr(\"viewBox\", [0, 0, width, height]);\n\n      svg.append('g')\n        .selectAll('rect')\n        .data(data)\n        .join('rect')\n        .attr('fill', d => this._manageColors(d.cases))\n        .attr('x', (d, i) => x(i))\n        .attr('y', d => y(d.cases))\n        .attr('height', d => y(0) - y(d.cases))\n        .attr('width', x.bandwidth())\n        .on('mouseover', d => {\n          const countryName  = d.country;\n          this.props.setPickedData({\n            countryName,\n            cases: d.cases\n          });\n        })\n\n      svg.append(\"g\")\n        .call(xAxis);\n\n      svg.append(\"g\")\n        .call(yAxis);\n\n      this.setState({\n        ...this.state,\n        loading: false\n      });\n    }\n  }\n\n  _manageColors(amount) {\n    if (!amount) return '#ff0909';\n    const ranges = [\n      {min: 0, max: 1000, color: '#fff1d9'},\n      {min: 1001, max: 10000, color: '#fdcd8b'},\n      {min: 10001, max: 50000, color: '#b55440'},\n      {min: 50001, max: 100000, color: '#b53828'},\n      {min: 100001, max: 420001, color: '#500000'},\n    ]\n\n    for(var range of ranges) {\n      if (amount > range.min && amount < range.max) return range.color;\n    }\n    return '#000';\n  }\n\n  render() {\n    return (\n      <div className=\"charts\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"charts__progress\" color=\"secondary\" />}\n        <svg className=\"charts__svg\"></svg>\n        <div className=\"charts__tooltip\"></div>\n      </div>\n    )\n  }\n}\n\nexport default Charts;","import React from 'react';\n\nimport './Legend.scss';\n\nconst getBackgroundcolor = (color) => {\n  return {backgroundColor: color};\n}\n\nconst Legend = (props) => {\n  return (\n    <div className=\"legend\">\n      <h3>Legend</h3>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#fff1d9\")}>0-1000</div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#fdcd8b\")}>1001-10000</div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#b55440\")}>10001-50000</div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#b53828\")}>50001-100000</div>\n      <div className=\"legend__element\" style={{...getBackgroundcolor(\"#500000\"), color: \"white\"}}>100001-320001</div>\n    </div>\n  )\n}\n\nexport default Legend;","import React, { useState } from 'react';\n\nimport './App.scss';\n\nimport Map from './Map'\nimport Info from './Info'\nimport Charts from './Charts'\nimport Legend from './Legend'\n\nconst App = () => {\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countriesData, setCountriesData] = useState([]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__info\">\n        <Info {...countryInfo}></Info>\n      </div>\n      <div className=\"app__charts\">\n        <Charts setPickedData={setCountryInfo} data={countriesData}></Charts>\n      </div>\n      <div className=\"app__content\">\n        <Map setPickedData={setCountryInfo} setAllData={setCountriesData}></Map>\n      </div>\n      <div className=\"app__legend\">\n        <Legend></Legend>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}