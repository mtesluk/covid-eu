{"version":3,"sources":["shared/config.tsx","../../src/charts/utils.tsx","../../src/charts/BarChart.tsx","../../src/charts/PieChart.tsx","shared/utils.tsx","map/Map.tsx","others/Legend.tsx","others/Info.tsx","charts/ChartsMain.tsx","charts/ChartsExtra.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["rangesConfigCases","ranges","min","max","color","default","manageColors","amount","colors","range","BarChart","componentDidMount","width","this","props","height","data","componentDidUpdate","prevProps","_prepareChart","margin","y","d","x","d3","svg","g","i","render","className","classSvgName","React","Component","PieChart","t","arc","Math","radius","arcs","pie","text","mapDataToInfo","selector","filterCallback","filter","el","map","name","country","value","getWidth","current","getComputedStyle","alert","computedStyle","clientWidth","parseFloat","paddingLeft","paddingRight","Map","ref","createRef","state","loading","endpoints","countries","projection","translate","scale","path","attr","promiseMap","headers","Accept","promiseData","axios","get","Promise","all","then","dataArray","mapData","countriesData","_filterCountries","features","feature","properties","setAllData","countriesDataObj","_reduceCountries","selectAll","enter","append","countryName","cases","on","setPickedData","deaths","recovered","critical","casesPerOneMillion","deathsPerOneMillion","testsPerOneMillion","setState","sovereignts","property","sovereignt","includes","reduce","sum","val","LinearProgress","getBackgroundcolor","backgroundColor","Legend","style","Info","extraClass","setTimeout","nextProps","nextState","ChartsMain","additionalCountries","mostNumCasesChart","mostNumDeathsChart","prevState","dataMost","dataMostDeaths","find","ChartsExtra","mostNumCasesPerMillionChart","mostNumDeathsPerMillionChart","mostNumTestsPerMillionChart","dataMostTests","dataMostCases","App","useState","countryInfo","setCountryInfo","setCountriesData","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a3abc1d4.chunk.js","sourcesContent":["import { RangeConfig } from 'charts';\n\n\nexport const mostCommonColor: string = '#500000';\n\nexport const rangesConfigCases: RangeConfig = {\n  ranges: [\n    {min: 0, max: 1000, color: '#fff1d9'},\n    {min: 1001, max: 10000, color: '#fdcd8b'},\n    {min: 10001, max: 50000, color: '#b55440'},\n    {min: 50001, max: 100000, color: '#b53828'},\n    {min: 100001, max: 420001, color: mostCommonColor},\n  ],\n  default: '#000',\n};\n\n\nexport const rangesConfigDeaths: RangeConfig = {\n  ranges: [\n    {min: 0, max: 30, color: '#fff1d9'},\n    {min: 31, max: 300, color: '#fdcd8b'},\n    {min: 301, max: 3000, color: '#b55440'},\n    {min: 3001, max: 30000, color: '#b53828'},\n    {min: 30001, max: 300000, color: mostCommonColor},\n  ],\n  default: '#000',\n};\n\n\nexport const rangesConfigTests: RangeConfig = {\n  ranges: [\n    {min: 0, max: 7000, color: '#fff1d9'},\n    {min: 7001, max: 10000, color: '#fdcd8b'},\n    {min: 10001, max: 20000, color: '#b55440'},\n    {min: 20001, max: 30000, color: '#b53828'},\n    {min: 30001, max: 200000, color: mostCommonColor},\n  ],\n  default: '#000',\n};","import { RangeConfig } from './interfaces';\n\nexport function manageColors(amount: number, colors: RangeConfig | string): string {\n  if (!(colors instanceof Object)) {\n    return colors;\n  }\n  for(var range of colors.ranges) {\n    if (amount > range.min && amount < range.max) return range.color;\n  }\n  return colors.default;\n};\n","import React from 'react';\n\nimport './BarChart.scss';\n\nimport * as d3 from 'd3';\nimport { manageColors } from './utils';\nimport { PropsBasic, RangeConfig, DataBasic } from './interfaces';\n\n\ninterface State {\n\n}\n\ninterface Props extends PropsBasic {\n  colors: RangeConfig | string;\n}\n\nclass BarChart extends React.Component<Props, State> {\n\n  componentDidMount() {\n    const width: number = this.props.width;\n    const height: number = 4/5 * width;\n    const data: DataBasic[] = this.props.data;\n    this._prepareChart(height, width, data, this.props.colors);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.props.data !== prevProps.data) {\n      const width: number = this.props.width;\n      const height: number = 4/5 * width;\n      const data: DataBasic[] = this.props.data;\n      this._prepareChart(height, width, data, this.props.colors);\n    }\n  }\n\n  _prepareChart(height: number, width: number, data: DataBasic[], colors: RangeConfig | string) {\n    const margin = ({top: 30, right: 0, bottom: 30, left: 40});\n    const y = d3.scaleLinear()\n      .domain([0, d3.max(data, d => (d.value as any))]).nice()\n      .range([height - margin.bottom, margin.top])\n\n    const x = d3.scaleBand()\n      .domain(d3.range(data.length) as any)\n      .range([margin.left, width - margin.right])\n      .padding(0.1);\n\n    const xAxis = g => g\n      .attr('transform', `translate(0,${height - margin.bottom})`)\n      .call(d3.axisBottom(x).tickFormat(i => data[i].name).tickSizeOuter(0));\n\n    const yAxis = g => g\n      .attr('transform', `translate(${margin.left},0)`)\n      .call(d3.axisLeft(y).ticks(null, 's'))\n      .call(g => g.select('.domain').remove());\n\n    const svg = d3.select(`.${this.props.classSvgName}`)\n      .attr('viewBox', [0, 0, width, height] as any);\n\n    svg.append('g')\n      .selectAll('rect')\n      .data(data)\n      .join('rect')\n      .attr('fill', d => manageColors(d.value, colors))\n      .attr('x', (d, i) => (x(i as any) as any))\n      .attr('y', d => y(d.value))\n      .attr('height', d => y(0) - y(d.value))\n      .attr('width', x.bandwidth())\n      .on('mouseover', d => {\n        this.props.setPickedData(d.name);\n      });\n\n    svg.append(\"g\")\n      .call(xAxis);\n\n    svg.append(\"g\")\n      .call(yAxis);\n  }\n\n  render() {\n    return (\n      <svg className={this.props.classSvgName}></svg>\n    )\n  }\n}\n\nexport default BarChart;","import React from 'react';\n\nimport './PieChart.scss';\n\nimport * as d3 from 'd3';\nimport { PropsBasic, DataBasic } from './interfaces';\n\ninterface State {\n\n}\n\ninterface Props extends PropsBasic {\n\n}\n\nclass PieChart extends React.Component<Props, State> {\n  componentDidMount() {\n    const data: DataBasic[] = this.props.data;\n    const width: number = this.props.width;\n    const height: number = 4/5 * width;\n    this._prepareChart(height, width, data);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.props.data !== prevProps.data) {\n      const data: DataBasic[] = this.props.data;\n      const width: number = this.props.width;\n      const height: number = 4/5 * width;\n      this._prepareChart(height, width, data);\n    }\n  }\n\n  _prepareChart(height: number, width: number, data: DataBasic[]) {\n    const color = d3.scaleOrdinal()\n      .domain(data.map(d => d.name))\n      .range(d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), data.length).reverse())\n\n    const arc = d3.arc()\n      .innerRadius(0)\n      .outerRadius(Math.min(width, height) / 2 - 1)\n\n    const radius = Math.min(width, height) / 2 * 0.8;\n    const arcLabel = {\n      centroid: d3.arc().innerRadius(radius).outerRadius(radius)\n      }\n\n    const pie = d3.pie()\n      .sort(null)\n      .value((d: any) => d.value)\n\n    const arcs = pie(data as any);\n\n    const svg = d3.select(`.${this.props.classSvgName}`)\n        .attr('viewBox', [-width / 2, -height / 2, width, height] as any);\n\n    svg.append('g')\n      .attr('stroke', 'white')\n      .selectAll('path')\n      .data(arcs)\n      .join('path')\n      .attr('fill', d => color((d.data as any).name) as any)\n      .attr('d', arc as any)\n      .on('mouseover', d => {\n        this.props.setPickedData((d.data as any).name);\n      })\n      .append('title')\n      .text(d => `${(d.data as any).name}: ${(d.data as any).value.toLocaleString()}`);\n\n    svg.append('g')\n      .attr('font-family', 'sans-serif')\n      .attr('font-size', 12)\n      .attr('text-anchor', 'middle')\n    .selectAll('text')\n    .data(arcs)\n    .join('text')\n    .attr('transform', (d: any) => {\n      d.innerRadius = 0;\n      d.outerRadius = 100;\n      var pos = arc.centroid(d);\n      return 'translate(' + pos + ')';\n  })\n      .call(text => text.append('tspan')\n          .attr('y', '-0.4rem')\n          .attr('font-weight', 'bold')\n          .text((d: any) => d.data.name))\n      .call(text => text.filter(d => (d.endAngle - d.startAngle) > 0.25).append(\"tspan\")\n          .attr('x', 0)\n          .attr('y', '0.7rem')\n          .attr('fill-opacity', 0.7)\n          .text((d: any) => d.data.value.toLocaleString()));\n  }\n\n  render() {\n    return (\n      <svg className={this.props.classSvgName}></svg>\n    )\n  }\n}\n\nexport default PieChart;","import { DataBasic } from \"charts\";\nimport { Info } from \"./interfaces\";\n\n\nexport function mapDataToInfo(data: Info[], selector: string, filterCallback: (el: Info) => boolean): DataBasic[] {\n      data = filterCallback ? data.filter((el: Info) => filterCallback(el)) : data;\n      const mappedData: DataBasic[] = data.map((el: Info) => ({name: el.country, value: el[selector]}));\n      return mappedData;\n}\n\n\nexport function getWidth(current: HTMLDivElement | null): number {\n    if (!getComputedStyle) { alert('Not supported'); }\n    const computedStyle = getComputedStyle(current as Element);\n    var width = current?.clientWidth || 0;\n    width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n    return width;\n  }","import React, { RefObject } from 'react';\n\nimport './Map.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport axios from 'axios';\nimport * as d3 from 'd3';\nimport { rangesConfigCases } from '../shared/config';\nimport { manageColors } from 'charts';\nimport { FeatureCollection, GeoJsonProperties } from 'geojson';\nimport { Info } from '../shared/interfaces';\nimport { getWidth } from '../shared/utils';\nimport { GeoProjection, GeoPath } from 'd3';\n\n\ninterface State {\n  loading: boolean;\n  width: number;\n  endpoints: {[name: string]: string};\n}\n\ninterface Props {\n  setPickedData: (data: Info) => any;\n  setAllData: (data: Info[]) => any;\n}\n\ninterface InfoObj {\n  [countryName: string]: Info;\n}\n\nclass Map extends React.Component<Props, State> {\n  ref: RefObject<HTMLDivElement> = React.createRef();\n  state = {\n    loading: true,\n    width: 0,\n    endpoints: {\n      countries: \"https://coronavirus-19-api.herokuapp.com/countries\",\n      map: \"./eu.json\"\n    }\n  };\n\n  componentDidMount() {\n    const width: number = getWidth(this.ref.current);\n    const height: number = 4/5 * width;\n    const projection: GeoProjection = d3.geoMercator()\n               .translate([ width/4, height*1.6 ])\n               .scale(width/1.1);\n\n    const path: GeoPath = d3.geoPath()\n            .projection(projection);\n\n    const svg = d3.select('.map__svg')\n          .attr('width', width)\n          .attr('height', height);\n\n    const promiseMap: Promise<any> = d3.json(this.state.endpoints.map, {\n      headers: { Accept: \"application/json; odata=verbose\"}\n    });\n    const promiseData: Promise<any> = axios.get(this.state.endpoints.countries);\n\n    Promise.all([promiseMap, promiseData]).then((dataArray: [FeatureCollection, {data: Info[]}]) => {\n      const mapData: FeatureCollection = dataArray[0];\n      const countriesData: Info[] = this._filterCountries(dataArray[1].data, mapData.features.map(feature => feature.properties));\n      this.props.setAllData(countriesData);\n      const countriesDataObj: InfoObj = this._reduceCountries(countriesData);\n\n      svg.selectAll('path')\n        .data(mapData.features)\n        .enter()\n        .append('path')\n        .attr('d', path)\n        .attr('fill', d => {\n          const countryName: string  = d.properties?.name;\n          const color: string = manageColors(countriesDataObj[countryName]?.cases, rangesConfigCases)\n          return color;\n        })\n        .attr('stroke', 'red')\n        .on('mouseover', d => {\n          const countryName: string  = d.properties?.name;\n          this.props.setPickedData({\n            country: countryName,\n            cases: countriesDataObj[countryName]?.cases,\n            deaths: countriesDataObj[countryName]?.deaths,\n            recovered: countriesDataObj[countryName]?.recovered,\n            critical: countriesDataObj[countryName]?.critical,\n            casesPerOneMillion: countriesDataObj[countryName]?.casesPerOneMillion,\n            deathsPerOneMillion: countriesDataObj[countryName]?.deathsPerOneMillion,\n            testsPerOneMillion: countriesDataObj[countryName]?.testsPerOneMillion,\n          });\n        });\n\n        this.setState({\n          ...this.state,\n          loading: false\n        });\n    });\n  }\n\n  _filterCountries(countries: Info[], properties: GeoJsonProperties): Info[] {\n    const sovereignts: string[] = properties?.map(property => property?.sovereignt);\n    countries = countries.filter(country => sovereignts.includes(country.country));\n    return countries;\n  }\n\n  _reduceCountries(countries: Info[]): InfoObj {\n    return countries.reduce((sum, val) => ({...sum, [val.country]: val}), {});\n  }\n\n  render() {\n    return (\n      <div className=\"map\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"map__progress\" color=\"secondary\" />}\n        <svg className=\"map__svg\"></svg>\n      </div>\n    )\n  }\n}\n\nexport default Map;","import React from 'react';\n\nimport './Legend.scss';\n\n\nfunction getBackgroundcolor(color: string): {backgroundColor: string} {\n  return {backgroundColor: color};\n}\n\ninterface Props {\n\n}\n\nconst Legend = (props: Props) => {\n  return (\n    <div className=\"legend\">\n      <h3>Legend</h3>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#fff1d9\")}>Less</div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#fdcd8b\")}></div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#b55440\")}></div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#b53828\")}></div>\n      <div className=\"legend__element\" style={{...getBackgroundcolor(\"#500000\"), color: \"white\"}}>More</div>\n    </div>\n  )\n}\n\nexport default Legend;","import React from 'react';\n\nimport './Info.scss';\n\nimport { Info as IInfo } from '../shared/interfaces';\nimport Legend from '../others/Legend';\n\n\ninterface State {\n  extraClass: string;\n}\n\ninterface Props {\n  data: IInfo;\n}\n\nclass Info extends React.Component<Props, State> {\n  state = {\n    extraClass: '',\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.data.country !== prevProps.data.country) {\n      setTimeout(() => {\n        this.setState({\n          ...this.state,\n          extraClass: ''\n        })\n      }, 1000)\n    }\n  }\n\n  getSnapshotBeforeUpdate(nextProps: Props, nextState: State) {\n    if (this.props.data.country !== nextProps.data.country) {\n      this.setState({\n        ...this.state,\n        extraClass: 'info__anim'\n      })\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div className=\"info\">\n        <div className={this.state.extraClass}>\n          <p className=\"info__element\">Name: {this.props.data.country || 'none'}</p>\n          <p className=\"info__element\">Cases: {this.props.data.cases || '0'}</p>\n          <p className=\"info__element\">Deaths: {this.props.data.deaths || '0'}</p>\n          <p className=\"info__element\">Recovered: {this.props.data.recovered || '0'}</p>\n          <p className=\"info__element\">Critical: {this.props.data.critical || '0'}</p>\n          <p className=\"info__element\">Cases Per Million: {this.props.data.casesPerOneMillion || '0'}</p>\n          <p className=\"info__element\">Deaths Per Million: {this.props.data.deathsPerOneMillion || '0'}</p>\n          <p className=\"info__element\">Tests Per Million: {this.props.data.testsPerOneMillion || '0'}</p>\n        </div>\n        <div className=\"info__legend\">\n          <Legend></Legend>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Info;","import React, { RefObject } from 'react';\n\nimport './ChartsMain.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport { BarChart, PieChart, DataBasic } from 'charts';\nimport { mostCommonColor } from '../shared/config';\nimport { Info } from '../shared/interfaces';\nimport { mapDataToInfo, getWidth } from '../shared/utils';\n\n\ninterface State {\n  loading: boolean;\n  mostNumCasesChart: {width: number, data: DataBasic[]};\n  mostNumDeathsChart: {width: number, data: DataBasic[]};\n}\n\ninterface Props {\n  data: Info[];\n  setPickedData: (data: Info) => any;\n}\n\nclass ChartsMain extends React.Component<Props, State> {\n  ref: RefObject<HTMLDivElement> = React.createRef();\n  additionalCountries: string[] = ['Poland'];\n  state = {\n    loading: true,\n    mostNumCasesChart: {\n      width: 0,\n      data: []\n    },\n    mostNumDeathsChart: {\n      width: 0,\n      data: []\n    },\n  };\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.props.data !== prevProps.data) {\n      const width: number = getWidth(this.ref.current);\n      const dataMost: DataBasic[] = mapDataToInfo(this.props.data, 'cases', (el: Info) => (el.cases > 100000 || this.additionalCountries.includes(el.country)));\n      const dataMostDeaths: DataBasic[] = mapDataToInfo(this.props.data, 'deaths', (el: Info) => (el.deaths > 20000 || this.additionalCountries.includes(el.country)));\n\n      this.setState({\n        ...this.state,\n        loading: false,\n        mostNumCasesChart: {\n          width,\n          data: dataMost\n        },\n        mostNumDeathsChart: {\n          width,\n          data: dataMostDeaths\n        },\n      });\n    }\n  }\n\n  setPickedData(name: string) {\n    const data: Info = this.props.data.find((el: Info) => (el.country === name)) as Info;\n    this.props.setPickedData(data);\n  }\n\n  render() {\n    return (\n      <div className=\"charts-main\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"charts-main__progress\" color=\"secondary\" />}\n        <header className=\"charts-main__header\">Most numerous cases</header>\n        <BarChart\n          classSvgName=\"charts-main__svg-bar\"\n          setPickedData={(name: string) => this.setPickedData(name)}\n          width={this.state.mostNumCasesChart.width}\n          data={this.state.mostNumCasesChart.data}\n          colors={mostCommonColor}\n        ></BarChart>\n        <header className=\"charts-main__header\">Most numerous deaths</header>\n        <PieChart\n          classSvgName=\"charts-main__svg-pie\"\n          setPickedData={(name: string) => this.setPickedData(name)}\n          width={this.state.mostNumDeathsChart.width}\n          data={this.state.mostNumDeathsChart.data}\n        ></PieChart>\n        <p className=\"charts-main__footer\">Source: https://coronavirus-19-api.herokuapp.com/countries</p>\n      </div>\n    )\n  }\n}\n\nexport default ChartsMain;","import React, { RefObject } from 'react';\n\nimport './ChartsExtra.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport { BarChart, DataBasic } from 'charts';\nimport { mostCommonColor } from '../shared/config';\nimport { Info } from '../shared/interfaces';\nimport { mapDataToInfo, getWidth } from '../shared/utils';\n\ninterface State {\n  loading: boolean;\n  mostNumCasesPerMillionChart: {width: number, data: DataBasic[]};\n  mostNumDeathsPerMillionChart: {width: number, data: DataBasic[]};\n  mostNumTestsPerMillionChart: {width: number, data: DataBasic[]};\n}\n\ninterface Props {\n  data: Info[];\n  setPickedData: (data: Info) => void;\n}\n\nclass ChartsExtra extends React.Component<Props, State> {\n  ref: RefObject<HTMLDivElement> = React.createRef();\n  additionalCountries: string[] = ['Poland'];\n  state: State = {\n    loading: true,\n    mostNumCasesPerMillionChart: {\n      width: 0,\n      data: []\n    },\n    mostNumDeathsPerMillionChart: {\n      width: 0,\n      data: []\n    },\n    mostNumTestsPerMillionChart: {\n      width: 0,\n      data: []\n    },\n  };\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.props.data !== prevProps.data) {\n      const width: number = getWidth(this.ref.current);\n      const dataMostDeaths: DataBasic[] = mapDataToInfo(this.props.data, 'deathsPerOneMillion', (el: Info) => (el.deathsPerOneMillion > 300 || this.additionalCountries.includes(el.country)));\n      const dataMostTests: DataBasic[] = mapDataToInfo(this.props.data, 'testsPerOneMillion', (el: Info) => (el.cases > 100000 || this.additionalCountries.includes(el.country)));\n      const dataMostCases: DataBasic[] = mapDataToInfo(this.props.data, 'casesPerOneMillion', (el: Info) => (el.casesPerOneMillion > 4000 || this.additionalCountries.includes(el.country)));\n\n      this.setState({\n        ...this.state,\n        loading: false,\n        mostNumCasesPerMillionChart: {\n          width,\n          data: dataMostCases\n        },\n        mostNumDeathsPerMillionChart: {\n          width,\n          data: dataMostDeaths\n        },\n        mostNumTestsPerMillionChart: {\n          width,\n          data: dataMostTests\n        },\n      });\n    }\n  }\n\n  setPickedData(name: string) {\n    const data: Info = this.props.data.find((el: Info) => (el.country === name)) as Info;\n    this.props.setPickedData(data);\n  }\n\n  render() {\n    return (\n      <div className=\"charts-extra\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"charts-extra__progress\" color=\"secondary\" />}\n        <header className=\"charts-extra__header\">Most tests per million</header>\n        <BarChart\n          classSvgName=\"charts-extra__svg-bar-tests\"\n          setPickedData={(name: string) => this.setPickedData(name)}\n          width={this.state.mostNumTestsPerMillionChart.width}\n          data={this.state.mostNumTestsPerMillionChart.data}\n          colors={mostCommonColor}\n        ></BarChart>\n        <header className=\"charts-extra__header\">Most cases per million</header>\n        <BarChart\n          classSvgName=\"charts-extra__svg-bar-cases\"\n          setPickedData={(name: string) => this.setPickedData(name)}\n          width={this.state.mostNumCasesPerMillionChart.width}\n          data={this.state.mostNumCasesPerMillionChart.data}\n          colors={mostCommonColor}\n        ></BarChart>\n        <header className=\"charts-extra__header\">Most deaths per million</header>\n        <BarChart\n          classSvgName=\"charts-extra__svg-bar-deaths\"\n          setPickedData={(name: string) => this.setPickedData(name)}\n          width={this.state.mostNumDeathsPerMillionChart.width}\n          data={this.state.mostNumDeathsPerMillionChart.data}\n          colors={mostCommonColor}\n        ></BarChart>\n      </div>\n    )\n  }\n}\n\nexport default ChartsExtra;","import React, { useState } from 'react';\n\nimport './App.scss';\n\nimport Map from './map/Map';\nimport Info from './others/Info';\nimport ChartsMain from './charts/ChartsMain';\nimport ChartsExtra from './charts/ChartsExtra';\nimport { Info as IInfo } from './shared/interfaces';\n\nconst App = () => {\n  const [countryInfo, setCountryInfo] = useState<IInfo>({\n    country: 'Poland',\n    cases: 0,\n    deaths: 0,\n    recovered: 0,\n    critical: 0,\n    casesPerOneMillion: 0,\n    deathsPerOneMillion: 0,\n    testsPerOneMillion: 0,\n  });\n  const [countriesData, setCountriesData] = useState<IInfo[]>([]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__info\">\n        <Info data={countryInfo}></Info>\n      </div>\n      <div className=\"app__charts-main\">\n        <ChartsMain setPickedData={(data: IInfo) => setCountryInfo(data)} data={countriesData}></ChartsMain>\n      </div>\n      <div className=\"app__content\">\n        <Map setPickedData={(data: IInfo) => setCountryInfo(data)} setAllData={(data: IInfo[]) => setCountriesData(data)}></Map>\n      </div>\n      <div className=\"app__charts-extra\">\n        <ChartsExtra setPickedData={(data: IInfo) => setCountryInfo(data)} data={countriesData}></ChartsExtra>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}