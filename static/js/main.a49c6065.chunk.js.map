{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","ref","React","createRef","state","coronaData","width","endpoints","countries","map","getComputedStyle","alert","computedStyle","this","current","clientWidth","parseFloat","paddingLeft","paddingRight","tooltip","d3","height","projection","translate","scale","path","svg","append","attr","promiseMap","headers","Accept","promiseData","axios","get","Promise","all","then","dataArray","mapData","countriesData","_getCountries","data","features","feature","properties","selectAll","enter","d","countryName","name","_manageColors","cases","on","_setTooltip","pageX","pageY","setState","amount","min","max","color","range","display","style","text","sovereignts","property","sovereignt","filter","country","includes","reduce","sum","val","backgroundColor","className","_getBackgroundcolor","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sVAmJeA,E,kDA1Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,IAAMC,IAAMC,YACjB,EAAKC,MAAQ,CACXC,WAAY,GACZC,MAAO,EACPC,UAAW,CACTC,UAAW,qDACXC,IAAK,cARQ,E,gEAaE,IAAD,OACbC,kBAAoBC,MAAM,iBAC/B,IAAMC,EAAgBF,iBAAiBG,KAAKZ,IAAIa,SAC5CR,EAAQO,KAAKZ,IAAIa,QAAQC,YAC7BT,GAASU,WAAWJ,EAAcK,aAAeD,WAAWJ,EAAcM,cAE1E,IAAMC,EAAUC,IAAU,iBACpBC,EAAS,GAAMf,EACfgB,EAAaF,MACPG,UAAU,CAAEjB,EAAM,EAAU,IAAPe,IACrBG,MAAM,CAAElB,EAAM,MAEpBmB,EAAOL,MACJE,WAAWA,GAGdI,EAAMN,IAAU,QACfO,OAAO,OACPC,KAAK,QAAStB,GACdsB,KAAK,SAAUP,GAEhBQ,EAAaT,IAAQP,KAAKT,MAAMG,UAAUE,IAAK,CACnDqB,QAAS,CAAEC,OAAQ,qCAEfC,EAAcC,IAAMC,IAAIrB,KAAKT,MAAMG,UAAUC,WACnD2B,QAAQC,IAAI,CAACP,EAAYG,IAAcK,MAAK,SAAAC,GAC1C,IAAMC,EAAUD,EAAU,GACtBE,EAAgB,EAAKC,cAAcH,EAAU,GAAGI,KAAMH,EAAQI,SAASlC,KAAI,SAAAmC,GAAO,OAAIA,EAAQC,eAElGnB,EAAIoB,UAAU,QACXJ,KAAKH,EAAQI,UACbI,QACApB,OAAO,QACPC,KAAK,IAAKH,GACVG,KAAK,QAAQ,SAAAoB,GAAM,IAAD,EACXC,EAAeD,EAAEH,WAAWK,KAElC,OADY,EAAKC,cAAL,UAAmBX,EAAcS,UAAjC,aAAmB,EAA4BG,UAG5DxB,KAAK,UAAU,SAAAoB,GAAC,MAAI,SACpBK,GAAG,aAAa,SAAAL,GAAM,IAAD,EACdC,EAAeD,EAAEH,WAAWK,KAClC,EAAKI,YAAYnC,EAAS,CACxBoC,MAAOnC,IAASmC,MAChBC,MAAOpC,IAASoC,MAChBP,YAAaA,EACbG,MAAK,UAAEZ,EAAcS,UAAhB,aAAE,EAA4BG,WAGtCC,GAAG,YAAY,SAAAL,GACd,EAAKM,YAAYnC,MAGnB,EAAKsC,SAAL,eACK,EAAKrD,MADV,CAEEC,WAAYmC,U,oCAKNkB,GACZ,IAAKA,EAAQ,MAAO,UASpB,IARA,IAQQ,EAAR,IARe,CACb,CAACC,IAAK,EAAGC,IAAK,IAAMC,MAAO,WAC3B,CAACF,IAAK,KAAMC,IAAK,IAAOC,MAAO,WAC/B,CAACF,IAAK,MAAOC,IAAK,IAAOC,MAAO,WAChC,CAACF,IAAK,MAAOC,IAAK,IAAQC,MAAO,WACjC,CAACF,IAAK,OAAQC,IAAK,OAAQC,MAAO,YAGpC,eAAyB,CAArB,IAAIC,EAAK,KACX,GAAIJ,EAASI,EAAMH,KAAOD,EAASI,EAAMF,IAAK,OAAOE,EAAMD,MAE7D,MAAO,S,kCAGG1C,GAAuB,IAAduB,EAAa,uDAAN,KACtBA,GACFA,EAAI,aACFqB,QAAS,QACTR,MAAO,EACPC,MAAO,EACPP,YAAa,OACbG,MAAO,GACJV,GAELvB,EACG6C,MAAM,UAAWtB,EAAKqB,SACtBC,MAAM,OAAStB,EAAKa,MAAQ,GAAM,MAClCS,MAAM,MAAQtB,EAAKc,MAAQ,GAAM,MACjCQ,MAAM,SAAU,QAChBC,KAAK,YAAcvB,EAAKO,YAAc,WAAaP,EAAKU,QAAS,IAEpEjC,EAAQ6C,MAAM,UAAW,U,oCAIfxD,EAAWqC,GACvB,IAAMqB,EAAcrB,EAAWpC,KAAI,SAAA0D,GAAQ,OAAIA,EAASC,cAGxD,OADA5D,GADAA,EAAYA,EAAU6D,QAAO,SAAAC,GAAO,OAAIJ,EAAYK,SAASD,EAAQA,aAC/CE,QAAO,SAACC,EAAKC,GAAN,sBAAmBD,EAAnB,eAAyBC,EAAIJ,QAAUI,MAAO,M,0CAIzDb,GAClB,MAAO,CAACc,gBAAiBd,K,+BAIzB,OACE,yBAAKe,UAAU,MAAM3E,IAAKY,KAAKZ,KAC7B,qFACA,kGACA,2EACA,yBAAK2E,UAAU,sBAAsBZ,MAAOnD,KAAKgE,oBAAoB,YAArE,kBACA,yBAAKD,UAAU,sBAAsBZ,MAAOnD,KAAKgE,oBAAoB,YAArE,sBACA,yBAAKD,UAAU,sBAAsBZ,MAAOnD,KAAKgE,oBAAoB,YAArE,uBACA,yBAAKD,UAAU,sBAAsBZ,MAAOnD,KAAKgE,oBAAoB,YAArE,wBACA,yBAAKD,UAAU,sBAAsBZ,MAAK,eAAMnD,KAAKgE,oBAAoB,WAA/B,CAA2ChB,MAAO,WAA5F,yBACA,yBAAKe,UAAU,sB,GArIL1E,IAAM4E,WCOTC,EARH,WACV,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCEcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a49c6065.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Map.scss';\n\nimport axios from 'axios';\nimport * as d3 from 'd3';\n\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      coronaData: {},\n      width: 0,\n      endpoints: {\n        countries: \"https://coronavirus-19-api.herokuapp.com/countries\",\n        map: \"./eu.json\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (!getComputedStyle) { alert('Not supported'); }\n    const computedStyle = getComputedStyle(this.ref.current);\n    var width = this.ref.current.clientWidth;\n    width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n\n    const tooltip = d3.select('.map__tooltip');\n    const height = 4/5 * width;\n    const projection = d3.geoMercator()\n               .translate([ width/3, height*1.3 ])\n               .scale([ width/1.8 ]);\n\n    const path = d3.geoPath()\n            .projection(projection);\n\n\n    const svg = d3.select('.map')\n          .append('svg')\n          .attr('width', width)\n          .attr('height', height);\n\n    const promiseMap = d3.json(this.state.endpoints.map, {\n      headers: { Accept: \"application/json; odata=verbose\"}\n    });\n    const promiseData = axios.get(this.state.endpoints.countries);\n    Promise.all([promiseMap, promiseData]).then(dataArray => {\n      const mapData = dataArray[0];\n      var countriesData = this._getCountries(dataArray[1].data, mapData.features.map(feature => feature.properties));\n\n      svg.selectAll('path')\n        .data(mapData.features)\n        .enter()\n        .append('path')\n        .attr('d', path)\n        .attr('fill', d => {\n          const countryName  = d.properties.name;\n          var color = this._manageColors(countriesData[countryName]?.cases)\n          return color\n        })\n        .attr('stroke', d => 'red')\n        .on('mouseover', d => {\n          const countryName  = d.properties.name;\n          this._setTooltip(tooltip, {\n            pageX: d3.event.pageX,\n            pageY: d3.event.pageY,\n            countryName: countryName,\n            cases: countriesData[countryName]?.cases\n          })\n        })\n        .on('mouseout', d => {\n          this._setTooltip(tooltip);\n        });\n\n        this.setState({\n          ...this.state,\n          coronaData: countriesData\n        });\n    });\n  }\n\n  _manageColors(amount) {\n    if (!amount) return '#ff0909';\n    const ranges = [\n      {min: 0, max: 1000, color: '#fff1d9'},\n      {min: 1001, max: 10000, color: '#fdcd8b'},\n      {min: 10001, max: 50000, color: '#b55440'},\n      {min: 50001, max: 100000, color: '#b53828'},\n      {min: 100001, max: 320001, color: '#500000'},\n    ]\n\n    for(var range of ranges) {\n      if (amount > range.min && amount < range.max) return range.color;\n    }\n    return '#000';\n  }\n\n  _setTooltip(tooltip, data = null) {\n    if (data) {\n      data = {\n        display: 'block',\n        pageX: 0,\n        pageY: 0,\n        countryName: 'none',\n        cases: 0,\n        ...data\n      };\n      tooltip\n        .style('display', data.display)\n        .style('left', (data.pageX - 40) + 'px')\n        .style('top', (data.pageY - 40) + 'px')\n        .style('cursor', 'none')\n        .text('Country: ' + data.countryName + ' Cases: ' + data.cases || 'none');\n    } else {\n      tooltip.style('display', 'none');\n    }\n  }\n\n  _getCountries(countries, properties) {\n    const sovereignts = properties.map(property => property.sovereignt);\n    countries = countries.filter(country => sovereignts.includes(country.country));\n    countries = countries.reduce((sum, val) => ({...sum, [val.country]: val}), {});\n    return countries;\n  }\n\n  _getBackgroundcolor(color) {\n    return {backgroundColor: color};\n  }\n\n  render() {\n    return (\n      <div className=\"map\" ref={this.ref}>\n        <h1>Zakażenia i zgony spowodowane COVID-19 w Europie</h1>\n        <h1>Zródło: https://coronavirus-19-api.herokuapp.com/countries</h1>\n        <h3>Legenda (ilość zakażeń)</h3>\n        <div className=\"map__legend-element\" style={this._getBackgroundcolor(\"#fff1d9\")}>0-1000 osób</div>\n        <div className=\"map__legend-element\" style={this._getBackgroundcolor(\"#fdcd8b\")}>1001-10000 osób</div>\n        <div className=\"map__legend-element\" style={this._getBackgroundcolor(\"#b55440\")}>10001-50000 osób</div>\n        <div className=\"map__legend-element\" style={this._getBackgroundcolor(\"#b53828\")}>50001-100000 osób</div>\n        <div className=\"map__legend-element\" style={{...this._getBackgroundcolor(\"#500000\"), color: \"white\"}}>100001-220001 osób</div>\n        <div className=\"map__tooltip\"></div>\n      </div>\n    )\n  }\n}\n\nexport default Map;","import React from 'react';\n\nimport './App.scss';\n\nimport Map from './Map'\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Map></Map>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}