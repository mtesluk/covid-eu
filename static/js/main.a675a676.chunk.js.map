{"version":3,"sources":["shared/config.tsx","../../src/charts/utils.tsx","../../src/charts/BarChart.tsx","../../src/charts/PieChart.tsx","map/Map.tsx","others/Legend.tsx","others/Info.tsx","shared/utils.tsx","charts/ChartsMain.tsx","charts/ChartsExtra.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["rangesConfigCases","ranges","min","max","color","default","manageColors","amount","colors","range","BarChart","componentDidMount","width","this","props","height","data","componentDidUpdate","prevProps","_prepareChart","margin","y","d","x","d3","svg","g","i","render","className","classSvgName","React","Component","PieChart","Math","t","arc","radius","arcLabel","centroid","arcs","pie","text","Map","ref","createRef","state","loading","coronaData","endpoints","countries","map","getComputedStyle","alert","computedStyle","current","clientWidth","parseFloat","paddingLeft","paddingRight","projection","translate","scale","path","attr","promiseMap","headers","Accept","promiseData","axios","get","Promise","all","then","dataArray","mapData","countriesData","_filterCountries","features","feature","properties","setAllData","_reduceCountries","selectAll","enter","append","countryName","name","cases","on","setPickedData","country","deaths","recovered","critical","casesPerOneMillion","deathsPerOneMillion","testsPerOneMillion","setState","sovereignts","property","sovereignt","filter","includes","reduce","sum","val","LinearProgress","getBackgroundcolor","backgroundColor","Legend","style","Info","extraClass","setTimeout","nextProps","nextState","mapDataToInfo","selector","filterCallback","el","value","getWidth","ChartsMain","additionalCountries","mostNumCasesChart","mostNumDeathsChart","prevState","dataMost","dataMostDeaths","find","ChartsExtra","mostNumCasesPerMillionChart","mostNumDeathsPerMillionChart","mostNumTestsPerMillionChart","dataMostTests","dataMostCases","App","useState","countryInfo","setCountryInfo","setCountriesData","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a675a676.chunk.js","sourcesContent":["import { RangeConfig } from 'charts';\n\n\nexport const mostCommonColor = '#500000';\n\nexport const rangesConfigCases: RangeConfig = {\n  ranges: [\n    {min: 0, max: 1000, color: '#fff1d9'},\n    {min: 1001, max: 10000, color: '#fdcd8b'},\n    {min: 10001, max: 50000, color: '#b55440'},\n    {min: 50001, max: 100000, color: '#b53828'},\n    {min: 100001, max: 420001, color: mostCommonColor},\n  ],\n  default: '#000',\n};\n\n\nexport const rangesConfigDeaths: RangeConfig = {\n  ranges: [\n    {min: 0, max: 30, color: '#fff1d9'},\n    {min: 31, max: 300, color: '#fdcd8b'},\n    {min: 301, max: 3000, color: '#b55440'},\n    {min: 3001, max: 30000, color: '#b53828'},\n    {min: 30001, max: 300000, color: mostCommonColor},\n  ],\n  default: '#000',\n};\n\n\nexport const rangesConfigTests: RangeConfig = {\n  ranges: [\n    {min: 0, max: 7000, color: '#fff1d9'},\n    {min: 7001, max: 10000, color: '#fdcd8b'},\n    {min: 10001, max: 20000, color: '#b55440'},\n    {min: 20001, max: 30000, color: '#b53828'},\n    {min: 30001, max: 200000, color: mostCommonColor},\n  ],\n  default: '#000',\n};","import { RangeConfig } from './interfaces';\n\nexport const manageColors = (amount: number, colors: RangeConfig | string) => {\n  if (!(colors instanceof Object)) {\n    return colors;\n  }\n  for(var range of colors.ranges) {\n    if (amount > range.min && amount < range.max) return range.color;\n  }\n  return colors.default;\n};\n","import React from 'react';\n\nimport './BarChart.scss';\n\nimport * as d3 from 'd3';\nimport { manageColors } from './utils';\nimport { PropsBasic, RangeConfig, DataBasic } from './interfaces';\n\n\ninterface State {\n\n}\n\ninterface Props extends PropsBasic {\n  colors: RangeConfig | string;\n}\n\nclass BarChart extends React.Component<Props, State> {\n\n  componentDidMount() {\n    const width = this.props.width;\n    const height = 4/5 * width;\n    const data = this.props.data;\n    this._prepareChart(height, width, data, this.props.colors);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.props.data !== prevProps.data) {\n      const width = this.props.width;\n      const height = 4/5 * width;\n      const data = this.props.data;\n      this._prepareChart(height, width, data, this.props.colors);\n    }\n  }\n\n  _prepareChart(height: number, width: number, data: DataBasic[], colors: RangeConfig | string) {\n    const margin = ({top: 30, right: 0, bottom: 30, left: 40});\n    const y = d3.scaleLinear()\n      .domain([0, d3.max(data, d => (d.value as any))]).nice()\n      .range([height - margin.bottom, margin.top])\n\n    const x = d3.scaleBand()\n      .domain(d3.range(data.length) as any)\n      .range([margin.left, width - margin.right])\n      .padding(0.1);\n\n    const xAxis = g => g\n      .attr('transform', `translate(0,${height - margin.bottom})`)\n      .call(d3.axisBottom(x).tickFormat(i => data[i].name).tickSizeOuter(0));\n\n    const yAxis = g => g\n      .attr('transform', `translate(${margin.left},0)`)\n      .call(d3.axisLeft(y).ticks(null, 's'))\n      .call(g => g.select('.domain').remove());\n\n    const svg = d3.select(`.${this.props.classSvgName}`)\n      .attr('viewBox', [0, 0, width, height] as any);\n\n    svg.append('g')\n      .selectAll('rect')\n      .data(data)\n      .join('rect')\n      .attr('fill', d => manageColors(d.value, colors))\n      .attr('x', (d, i) => (x(i as any) as any))\n      .attr('y', d => y(d.value))\n      .attr('height', d => y(0) - y(d.value))\n      .attr('width', x.bandwidth())\n      .on('mouseover', d => {\n        this.props.setPickedData(d.name);\n      });\n\n    svg.append(\"g\")\n      .call(xAxis);\n\n    svg.append(\"g\")\n      .call(yAxis);\n  }\n\n  render() {\n    return (\n      <svg className={this.props.classSvgName}></svg>\n    )\n  }\n}\n\nexport default BarChart;","import React from 'react';\n\nimport './PieChart.scss';\n\nimport * as d3 from 'd3';\nimport { PropsBasic, DataBasic } from './interfaces';\n\ninterface State {\n\n}\n\ninterface Props extends PropsBasic {\n\n}\n\nclass PieChart extends React.Component<Props, State> {\n  componentDidMount() {\n    const width: number = this.props.width;\n    const height: number = 4/5 * width;\n    const data = this.props.data;\n    this._prepareChart(height, width, data);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.props.data !== prevProps.data) {\n      const data = this.props.data;\n      const width = this.props.width;\n      const height = Math.min(width, 500)\n      this._prepareChart(height, width, data);\n    }\n  }\n\n  _prepareChart(height: number, width: number, data: DataBasic[]) {\n    const color = d3.scaleOrdinal()\n      .domain(data.map(d => d.name))\n      .range(d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), data.length).reverse())\n\n    const arc = d3.arc()\n      .innerRadius(0)\n      .outerRadius(Math.min(width, height) / 2 - 1)\n\n    const radius = Math.min(width, height) / 2 * 0.8;\n    const arcLabel = {\n      centroid: d3.arc().innerRadius(radius).outerRadius(radius)\n      }\n\n    const pie = d3.pie()\n      .sort(null)\n      .value((d: any) => d.value)\n\n    const arcs = pie(data as any);\n\n    const svg = d3.select(`.${this.props.classSvgName}`)\n        .attr('viewBox', [-width / 2, -height / 2, width, height] as any);\n\n    svg.append('g')\n      .attr('stroke', 'white')\n      .selectAll('path')\n      .data(arcs)\n      .join('path')\n      .attr('fill', d => color((d.data as any).name) as any)\n      .attr('d', arc as any)\n      .append('title')\n      .text(d => `${(d.data as any).name}: ${(d.data as any).value.toLocaleString()}`);\n\n    svg.append('g')\n      .attr('font-family', 'sans-serif')\n      .attr('font-size', 12)\n      .attr('text-anchor', 'middle')\n    .selectAll('text')\n    .data(arcs)\n    .join('text')\n      .attr('transform', d => `translate(${arcLabel.centroid(d as any)})`)\n      .call(text => text.append('tspan')\n          .attr('y', '-0.4em')\n          .attr('font-weight', 'bold')\n          .text((d: any) => d.data.name))\n      .call(text => text.filter(d => (d.endAngle - d.startAngle) > 0.25).append(\"tspan\")\n          .attr('x', 0)\n          .attr('y', '0.7em')\n          .attr('fill-opacity', 0.7)\n          .text((d: any) => d.data.value.toLocaleString()));\n  }\n\n  render() {\n    return (\n      <svg className={this.props.classSvgName}></svg>\n    )\n  }\n}\n\nexport default PieChart;","import React, { RefObject } from 'react';\n\nimport './Map.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport axios from 'axios';\nimport * as d3 from 'd3';\nimport { rangesConfigCases } from '../shared/config';\nimport { manageColors } from 'charts';\nimport { FeatureCollection } from 'geojson';\nimport { Info } from '../shared/interfaces';\n\n\ninterface State {\n  loading: boolean;\n  coronaData: {};\n  width: number;\n  endpoints: {[name: string]: string};\n}\n\ninterface MapFeature {\n  type: string;\n  properties: {\n    scalerank: number;\n    featurecla: string;\n    labelrank: number;\n    sovereignt: string;\n    sov_a3: string;\n    adm0_dif: number;\n    level: number;\n    type: string;\n    admin: string;\n    adm0_a3: string;\n    geou_dif: number;\n    geounit: string;\n    gu_a3: string;\n    su_dif: number;\n    subunit: string;\n    su_a3: string;\n    brk_diff: number;\n    name: string;\n    name_long: string;\n    brk_a3: string;\n    brk_name: string;\n    brk_group: null;\n    abbrev: string;\n    postal: string;\n    formal_en: string;\n    formal_fr: null;\n    note_adm0: null;\n    note_brk: null;\n    name_sort: string;\n    name_alt: null;\n    mapcolor7: number;\n    mapcolor8: number;\n    mapcolor9: number;\n    mapcolor13: number;\n    pop_est: number;\n    gdp_md_est: number;\n    pop_year: number;\n    lastcensus: number;\n    gdp_year: number;\n    economy: string;\n    income_grp: string;\n    wikipedia: number;\n    fips_10: null;\n    iso_a2: string;\n    iso_a3: string;\n    iso_n3: string;\n    un_a3: string;\n    wb_a2: string;\n    wb_a3: string;\n    woe_id: number;\n    adm0_a3_is: string;\n    adm0_a3_us: string;\n    adm0_a3_un: number;\n    adm0_a3_wb: number;\n    continent: string;\n    region_un: string;\n    subregion: string;\n    region_wb: string;\n    name_len: number;\n    long_len: number;\n    abbrev_len: number;\n    tiny: number;\n    homepart: number;\n    filename: string;\n  };\n  geometry: {\n    type: string;\n    coordinates: [[[]]]\n  };\n}\n\ninterface MapData {\n  type: string;\n  name: string;\n  crs: {type: string, properties: { name: string}};\n  features: MapFeature[];\n}\n\ninterface Props {\n  setPickedData: (data: Info) => any;\n  setAllData: (data: Info[]) => any;\n}\n\nclass Map extends React.Component<Props, State> {\n  ref: RefObject<HTMLDivElement> = React.createRef();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      coronaData: {},\n      width: 0,\n      endpoints: {\n        countries: \"https://coronavirus-19-api.herokuapp.com/countries\",\n        map: \"./eu.json\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (!getComputedStyle) { alert('Not supported'); }\n    const computedStyle = getComputedStyle(this.ref.current as Element);\n    var width = this.ref.current?.clientWidth || 0;\n    width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n\n    const height = 4/5 * width;\n    const projection = d3.geoMercator()\n               .translate([ width/4, height*1.6 ])\n               .scale(width/1.1);\n\n    const path = d3.geoPath()\n            .projection(projection);\n\n    const svg = d3.select('.map__svg')\n          .attr('width', width)\n          .attr('height', height);\n\n    const promiseMap = d3.json(this.state.endpoints.map, {\n      headers: { Accept: \"application/json; odata=verbose\"}\n    });\n    const promiseData = axios.get(this.state.endpoints.countries);\n    Promise.all([promiseMap, promiseData]).then(dataArray => {\n      const mapData: FeatureCollection = dataArray[0];\n      let countriesData = this._filterCountries(dataArray[1].data, mapData.features.map(feature => feature.properties));\n      this.props.setAllData(countriesData);\n      countriesData = this._reduceCountries(countriesData);\n\n      svg.selectAll('path')\n        .data(mapData.features)\n        .enter()\n        .append('path')\n        .attr('d', path)\n        .attr('fill', d => {\n          const countryName  = d.properties?.name;\n          var color = manageColors(countriesData[countryName]?.cases, rangesConfigCases)\n          return color;\n        })\n        .attr('stroke', d => 'red')\n        .on('mouseover', d => {\n          const countryName  = d.properties?.name;\n          this.props.setPickedData({\n            country: countryName,\n            cases: countriesData[countryName]?.cases,\n            deaths: countriesData[countryName]?.deaths,\n            recovered: countriesData[countryName]?.recovered,\n            critical: countriesData[countryName]?.critical,\n            casesPerOneMillion: countriesData[countryName]?.casesPerOneMillion,\n            deathsPerOneMillion: countriesData[countryName]?.deathsPerOneMillion,\n            testsPerOneMillion: countriesData[countryName]?.testsPerOneMillion,\n          });\n        });\n\n        this.setState({\n          ...this.state,\n          loading: false\n        });\n\n        this.setState({\n          ...this.state,\n          coronaData: countriesData\n        });\n    });\n  }\n\n  _filterCountries(countries, properties) {\n    const sovereignts = properties.map(property => property.sovereignt);\n    countries = countries.filter(country => sovereignts.includes(country.country));\n    return countries;\n  }\n\n  _reduceCountries(countries) {\n    return countries.reduce((sum, val) => ({...sum, [val.country]: val}), {});\n  }\n\n  render() {\n    return (\n      <div className=\"map\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"map__progress\" color=\"secondary\" />}\n        <svg className=\"map__svg\"></svg>\n      </div>\n    )\n  }\n}\n\nexport default Map;","import React from 'react';\n\nimport './Legend.scss';\n\nfunction getBackgroundcolor(color: string) {\n  return {backgroundColor: color};\n}\n\nconst Legend = (props) => {\n  return (\n    <div className=\"legend\">\n      <h3>Legend</h3>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#fff1d9\")}>Less</div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#fdcd8b\")}></div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#b55440\")}></div>\n      <div className=\"legend__element\" style={getBackgroundcolor(\"#b53828\")}></div>\n      <div className=\"legend__element\" style={{...getBackgroundcolor(\"#500000\"), color: \"white\"}}>Most</div>\n    </div>\n  )\n}\n\nexport default Legend;","import React from 'react';\n\nimport './Info.scss';\n\nimport { Info as IInfo } from '../shared/interfaces';\nimport Legend from '../others/Legend';\n\n\ninterface State {\n  extraClass: string;\n}\n\ninterface Props {\n  data: IInfo;\n}\n\nclass Info extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      extraClass: '',\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.data.country !== prevProps.data.country) {\n      setTimeout(() => {\n        this.setState({\n          ...this.state,\n          extraClass: ''\n        })\n      }, 1000)\n    }\n  }\n\n  getSnapshotBeforeUpdate(nextProps: Props, nextState: State) {\n    if (this.props.data.country !== nextProps.data.country) {\n      this.setState({\n        ...this.state,\n        extraClass: 'info__anim'\n      })\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div className=\"info\">\n        <div className={this.state.extraClass}>\n          <p className=\"info__element\">Name: {this.props.data.country || 'none'}</p>\n          <p className=\"info__element\">Cases: {this.props.data.cases || '0'}</p>\n          <p className=\"info__element\">Deaths: {this.props.data.deaths || '0'}</p>\n          <p className=\"info__element\">Recovered: {this.props.data.recovered || '0'}</p>\n          <p className=\"info__element\">Critical: {this.props.data.critical || '0'}</p>\n          <p className=\"info__element\">Cases Per Million: {this.props.data.casesPerOneMillion || '0'}</p>\n          <p className=\"info__element\">Deaths Per Million: {this.props.data.deathsPerOneMillion || '0'}</p>\n          <p className=\"info__element\">Tests Per Million: {this.props.data.testsPerOneMillion || '0'}</p>\n        </div>\n        <div className=\"info__legend\">\n          <Legend></Legend>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Info;","import { DataBasic } from \"charts\";\nimport { Info } from \"./interfaces\";\n\n\nexport function mapDataToInfo(data: Info[], selector: string, filterCallback: (el: Info) => boolean): DataBasic[] {\n      data = filterCallback ? data.filter((el: Info) => filterCallback(el)) : data;\n      const mappedData: DataBasic[] = data.map((el: Info) => ({name: el.country, value: el[selector]}));\n      return mappedData;\n}\n\n\nexport function getWidth(current: HTMLDivElement | null): number {\n    if (!getComputedStyle) { alert('Not supported'); }\n    const computedStyle = getComputedStyle(current as Element);\n    var width = current?.clientWidth || 0;\n    width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n    return width;\n  }","import React, { RefObject } from 'react';\n\nimport './ChartsMain.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport { BarChart, PieChart, DataBasic } from 'charts';\nimport { mostCommonColor } from '../shared/config';\nimport { Info } from '../shared/interfaces';\nimport { mapDataToInfo, getWidth } from '../shared/utils';\n\n\ninterface State {\n  loading: boolean;\n  mostNumCasesChart: {width: number, data: DataBasic[]};\n  mostNumDeathsChart: {width: number, data: DataBasic[]};\n}\n\ninterface Props {\n  data: Info[];\n  setPickedData: (data: Info) => any;\n}\n\nclass ChartsMain extends React.Component<Props, State> {\n  ref: RefObject<HTMLDivElement> = React.createRef();\n  additionalCountries: string[] = ['Poland'];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      mostNumCasesChart: {\n        width: 0,\n        data: []\n      },\n      mostNumDeathsChart: {\n        width: 0,\n        data: []\n      },\n    };\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.props.data !== prevProps.data) {\n      const width = getWidth(this.ref.current);\n      const dataMost = mapDataToInfo(this.props.data, 'cases', (el: Info) => (el.cases > 100000 || this.additionalCountries.includes(el.country)));\n      const dataMostDeaths = mapDataToInfo(this.props.data, 'deaths', (el: Info) => (el.deaths > 20000 || this.additionalCountries.includes(el.country)));\n\n      this.setState({\n        ...this.state,\n        loading: false,\n        mostNumCasesChart: {\n          width,\n          data: dataMost\n        },\n        mostNumDeathsChart: {\n          width,\n          data: dataMostDeaths\n        },\n      });\n    }\n  }\n\n  setPickedData(name: string) {\n    const data: Info = this.props.data.find((el: Info) => (el.country === name)) as Info;\n    this.props.setPickedData(data);\n  }\n\n  render() {\n    return (\n      <div className=\"charts-main\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"charts-main__progress\" color=\"secondary\" />}\n        <header className=\"charts-main__header\">Most numerous countries</header>\n        <BarChart\n          classSvgName=\"charts-main__svg-bar\"\n          setPickedData={(name: string) => this.setPickedData(name)}\n          width={this.state.mostNumCasesChart.width}\n          data={this.state.mostNumCasesChart.data}\n          colors={mostCommonColor}\n        ></BarChart>\n        <header className=\"charts-main__header\">Most numerous deaths</header>\n        <PieChart\n          classSvgName=\"charts-main__svg-pie\"\n          setPickedData={(name: string) => this.setPickedData(name)}\n          width={this.state.mostNumDeathsChart.width}\n          data={this.state.mostNumDeathsChart.data}\n        ></PieChart>\n        <p className=\"charts-main__footer\">Source: https://coronavirus-19-api.herokuapp.com/countries</p>\n      </div>\n    )\n  }\n}\n\nexport default ChartsMain;","import React, { RefObject } from 'react';\n\nimport './ChartsExtra.scss';\nimport { LinearProgress } from '@material-ui/core';\n\nimport { BarChart, DataBasic } from 'charts';\nimport { mostCommonColor } from '../shared/config';\nimport { Info } from '../shared/interfaces';\nimport { mapDataToInfo, getWidth } from '../shared/utils';\n\ninterface State {\n  loading: boolean;\n  mostNumCasesPerMillionChart: {width: number, data: DataBasic[]};\n  mostNumDeathsPerMillionChart: {width: number, data: DataBasic[]};\n  mostNumTestsPerMillionChart: {width: number, data: DataBasic[]};\n}\n\ninterface Props {\n  data: Info[];\n  setPickedData: (data: Info) => any;\n}\n\nclass ChartsExtra extends React.Component<Props, State> {\n  ref: RefObject<HTMLDivElement> = React.createRef();\n  additionalCountries: string[] = ['Poland'];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      mostNumCasesPerMillionChart: {\n        width: 0,\n        data: []\n      },\n      mostNumDeathsPerMillionChart: {\n        width: 0,\n        data: []\n      },\n      mostNumTestsPerMillionChart: {\n        width: 0,\n        data: []\n      },\n    };\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.props.data !== prevProps.data) {\n      const width = getWidth(this.ref.current);\n      const dataMostDeaths = mapDataToInfo(this.props.data, 'deathsPerOneMillion', (el: Info) => (el.deathsPerOneMillion > 300 || this.additionalCountries.includes(el.country)));\n      const dataMostTests = mapDataToInfo(this.props.data, 'testsPerOneMillion', (el: Info) => (el.cases > 100000 || this.additionalCountries.includes(el.country)));\n      const dataMostCases = mapDataToInfo(this.props.data, 'casesPerOneMillion', (el: Info) => (el.casesPerOneMillion > 4000 || this.additionalCountries.includes(el.country)));\n\n      this.setState({\n        ...this.state,\n        loading: false,\n        mostNumCasesPerMillionChart: {\n          width,\n          data: dataMostCases\n        },\n        mostNumDeathsPerMillionChart: {\n          width,\n          data: dataMostDeaths\n        },\n        mostNumTestsPerMillionChart: {\n          width,\n          data: dataMostTests\n        },\n      });\n    }\n  }\n\n  setPickedData(name: string) {\n    const data: Info = this.props.data.find((el: Info) => (el.country === name)) as Info;\n    this.props.setPickedData(data);\n  }\n\n  render() {\n    return (\n      <div className=\"charts-extra\" ref={this.ref}>\n        {this.state.loading && <LinearProgress className=\"charts-extra__progress\" color=\"secondary\" />}\n        <header className=\"charts-extra__header\">Most tests per million</header>\n        <BarChart\n          classSvgName=\"charts-extra__svg-bar-tests\"\n          setPickedData={(name: string) => this.setPickedData(name)}\n          width={this.state.mostNumTestsPerMillionChart.width}\n          data={this.state.mostNumTestsPerMillionChart.data}\n          colors={mostCommonColor}\n        ></BarChart>\n        <header className=\"charts-extra__header\">Most cases per million</header>\n        <BarChart\n          classSvgName=\"charts-extra__svg-bar-cases\"\n          setPickedData={(name: string) => this.setPickedData(name)}\n          width={this.state.mostNumCasesPerMillionChart.width}\n          data={this.state.mostNumCasesPerMillionChart.data}\n          colors={mostCommonColor}\n        ></BarChart>\n        <header className=\"charts-extra__header\">Most deaths per million</header>\n        <BarChart\n          classSvgName=\"charts-extra__svg-bar-deaths\"\n          setPickedData={(name: string) => this.setPickedData(name)}\n          width={this.state.mostNumDeathsPerMillionChart.width}\n          data={this.state.mostNumDeathsPerMillionChart.data}\n          colors={mostCommonColor}\n        ></BarChart>\n      </div>\n    )\n  }\n}\n\nexport default ChartsExtra;","import React, { useState } from 'react';\n\nimport './App.scss';\n\nimport Map from './map/Map';\nimport Info from './others/Info';\nimport ChartsMain from './charts/ChartsMain';\nimport ChartsExtra from './charts/ChartsExtra';\nimport { Info as IInfo } from './shared/interfaces';\n\nconst App = () => {\n  const [countryInfo, setCountryInfo] = useState<IInfo>({\n    country: 'Poland',\n    cases: 0,\n    deaths: 0,\n    recovered: 0,\n    critical: 0,\n    casesPerOneMillion: 0,\n    deathsPerOneMillion: 0,\n    testsPerOneMillion: 0,\n  });\n  const [countriesData, setCountriesData] = useState<IInfo[]>([]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__info\">\n        <Info data={countryInfo}></Info>\n      </div>\n      <div className=\"app__charts-main\">\n        <ChartsMain setPickedData={(data: IInfo) => setCountryInfo(data)} data={countriesData}></ChartsMain>\n      </div>\n      <div className=\"app__content\">\n        <Map setPickedData={(data: IInfo) => setCountryInfo(data)} setAllData={(data: IInfo[]) => setCountriesData(data)}></Map>\n      </div>\n      <div className=\"app__charts-extra\">\n        <ChartsExtra setPickedData={(data: IInfo) => setCountryInfo(data)} data={countriesData}></ChartsExtra>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}